#!/usr/bin/bash

#
# firewall - DevOpsBroker administrative tool for managing nftables
#
# Copyright (C) 2018-2020 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu Ubuntu 20.04.1 LTS running kernel.osrelease = 5.4.0-42
#
# The philosophy behind this script is to allow the user easy access to all
# relevant information regarding firewall settings on his or her machine.
#
# The options provided allow the user to sharpen the focus of their work while
# utilizing this script.
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# Load /etc/devops/functions-io.conf if FUNC_IO_CONFIG is unset
if [ -z "$FUNC_IO_CONFIG" ] && [ -f /etc/devops/functions-io.conf ]; then
	source /etc/devops/functions-io.conf
fi

${FUNC_IO_CONFIG?"[1;91mCannot load '/etc/devops/functions-io.conf': No such file[0m"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Robustness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

set -o errexit                 # Exit if any statement returns a non-true value
set -o nounset                 # Exit if use an uninitialised variable
set -o pipefail                # Exit if any statement in a pipeline returns a non-true value
IFS=$'\n\t'                    # Default the Internal Field Separator to newline and tab

## Script information
SCRIPT_DIR=$( $EXEC_DIRNAME "$BASH_SOURCE" )
scriptName='firewall'

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     showHelp
# Description:  Displays help message to the user
# -----------------------------------------------------------------------------
function showHelp() {
	# BEGIN showHelp function

	if [ -z "$command" ]; then
		printUsage "$scriptName COMMAND ${gold}[OPTION...]"
		echo
		printUsage 'false' "$scriptName list ${gold}{ ruleset | tables | table [TABLE_NAME] }"
		printUsage 'false' "$scriptName log"
		echo
	elif [ "$command" == 'list' ]; then
		printUsage "$scriptName list ${gold}{ ruleset | tables | table [TABLE_NAME] }"
		echo ${romantic}
		echo 'List active nftables rulesets and tables'${reset}
		echo
		echo ${bold}${white}'Valid Options:'${reset}
		echo -e ${bold}${yellow}'  ruleset\t\t'          ${romantic}'View all configured nftables rulesets'
		echo -e ${bold}${yellow}'  tables\t\t'           ${romantic}'View all configured nftables tables'
		echo -e ${bold}${yellow}'  table [TABLE_NAME]\t' ${romantic}'View the specified nftables table'
		echo ${reset}
	elif [ "$command" == 'log' ]; then
		printUsage "$scriptName log"
		echo ${romantic}
		echo 'Display summary of packets blocked by the firewall'${reset}
	fi

	# END showHelp function
}

################################## Variables ##################################

## Bash exec variables
EXEC_FIRELOG=/usr/local/bin/firelog
EXEC_MODPROBE=/usr/sbin/modprobe
EXEC_NFT=/usr/sbin/nft

## Options
command=${1:-}
subCommand=${2:-}
tableName=''
chain=''

## Variables
showCommandHelp=false
sudoCommands=('list')
validCommands=(${sudoCommands[@]} 'log')
validSubCommands=('ruleset' 'tables' 'table')

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

if [ "$command" == 'help' ]; then
	showCommandHelp=true
	command=${2:-}
fi

# Display usage if no parameters given
if [ "$showCommandHelp" == 'false' ] && [ -z "$command" ]; then
	printUsage "$scriptName { help | list | log }"
	exit 1
fi

# Display error if invalid command
if [ "$command" ]; then
	returnValue=$(containsElement "$command" "${validCommands[@]}")

	if [ $returnValue == "1" ]; then
		printError $scriptName "Invalid command: '$command'"
		echo
		printUsage "$scriptName { help | list | log }"

		exit 1
	fi
fi

if [ "$showCommandHelp" == 'true' ]; then
	showHelp
	exit 0
fi

# Display error if not running as root
returnValue=$(containsElement "$command" "${sudoCommands[@]}")

if [ $returnValue == "0" ] && [ "$USER" != 'root' ]; then
	printError $scriptName 'Permission denied (you must be root)'
	exit 1
fi

if [ "$command" == 'list' ]; then

	if [ -z "$subCommand" ]; then
		printError $scriptName "Missing sub-command"
		echo
		printUsage "$scriptName list { ruleset | tables | table [TABLE_NAME] }"

		exit 1
	fi

	# Display error if not valid sub-command
	returnValue=$(containsElement "$subCommand" "${validSubCommands[@]}")

	if [ $returnValue == "1" ]; then
		printError $scriptName "Invalid sub-command: '$subCommand'"
		echo
		printUsage "$scriptName list { ruleset | tables | table [TABLE_NAME] }"

		exit 1
	fi

	if [ "$subCommand" == 'table' ]; then
		tableName=${3:-}

		if [ -z "$tableName" ]; then
			printError $scriptName "Missing table name"
			echo
			printUsage "$scriptName list table [TABLE_NAME]"

			exit 1
		fi

		# Check table name for validity
		set +o errexit
		checkTableName="$($EXEC_NFT list tables | $EXEC_GREP -w $tableName)"

		if [ -z "$checkTableName" ]; then
			printError $scriptName "Invalid table name: '$tableName'"
			echo
			printUsage "$scriptName list table [TABLE_NAME]"

			exit 1
		fi

		tableName=$(echo $checkTableName | $EXEC_AWK '{ print $2 " " $3 }')
		set -o errexit
	fi
fi

################################### Actions ###################################

if [ $command == 'list' ]; then

	# Process subcommand
	if [ "$subCommand" == 'ruleset' ]; then

		$EXEC_NFT list ruleset

	elif [ "$subCommand" == 'tables' ]; then

		$EXEC_NFT list tables

	elif [ "$subCommand" == 'table' ]; then

		$EXEC_NFT list table $tableName

	fi

elif [ $command == 'log' ]; then

	$EXEC_FIRELOG

fi

exit 0
