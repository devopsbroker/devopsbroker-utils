#!/usr/bin/bash

#
# smbd - DevOpsBroker utility for managing the smbd firewall services
#
# Copyright (C) 2018-2020 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.5 LTS running kernel.osrelease = 4.15.0-34
#
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# Load /etc/devops/functions-net.conf if FUNC_NET_CONFIG is unset
if [ -z "$FUNC_NET_CONFIG" ] && [ -f /etc/devops/functions-net.conf ]; then
	source /etc/devops/functions-net.conf
fi

${FUNC_NET_CONFIG?"[1;91mCannot load '/etc/devops/functions-net.conf': No such file[0m"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Robustness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

set -o errexit                 # Exit if any statement returns a non-true value
set -o nounset                 # Exit if use an uninitialised variable
set -o pipefail                # Exit if any statement in a pipeline returns a non-true value
IFS=$'\n\t'                    # Default the Internal Field Separator to newline and tab

scriptName='smbd'

# Display error if not running as root
if [ "$USER" != 'root' ]; then
	printError $scriptName 'Permission denied (you must be root)'
	exit 1
fi

################################## Variables ##################################

## Bash exec variables
IPSET=/sbin/ipset
EXEC_FIRECHAIN=/usr/local/sbin/firechain

## Options
command="${1:-}"
NIC="${2:-}"

## Variables
saveOnExit='false'
validCommands=('enable')

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage "$scriptName enable ${gold}NIC"
	exit 1
fi

# Display error if invalid command
containsElement "$command" "${validCommands[@]}"
if [ $? -eq 1 ]; then
	printError $scriptName "Invalid command: '$command'"
	echo
	printUsage "$scriptName enable ${gold}NIC"

	exit 1
fi

if [ -z "$NIC" ]; then

	# Get default NIC if not present on command-line
	NIC="$(getDefaultNIC)"

else
	# Display error if network interface parameter is invalid
	if [ ! -L /sys/class/net/$NIC ]; then
		printError "$SCRIPT_EXEC" "Cannot access '$NIC': No such network interface"
		echo
		printUsage "$SCRIPT_EXEC ${gold}[NIC]"

		exit 1
	fi
fi

################################### Actions ###################################

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IPSET PORTS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Check to see if IPSet tcp_service_ports has already been configured
set +o errexit

$IPSET test tcp_service_ports 445

if [ $? -ne 0 ]; then
	printInfo 'Allow TCP SMB client/service traffic'
	$IPSET add tcp_client_ports 445       # SMB
	$IPSET add tcp_service_ports 445      # SMB
	saveOnExit='true'
fi

set -o errexit

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ RAW PREROUTING ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#printInfo 'Allow incoming TCP SMB request packets (RAW PREROUTING)'
#$EXEC_FIRECHAIN add raw "raw-${NIC}-tcp-pre" tcp dest 445 do_not_track 2>/dev/null

#printInfo 'Allow incoming TCP SMB response packets (RAW PREROUTING)'
#$EXEC_FIRECHAIN add raw "raw-${NIC}-tcp-pre" tcp source 445 do_not_track 2>/dev/null

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ RAW OUTPUT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#printInfo 'Allow outgoing TCP SMB request packets (RAW OUTPUT)'
#$EXEC_FIRECHAIN add raw "raw-${NIC}-tcp-out" tcp dest 445 do_not_track 2>/dev/null

#printInfo 'Allow outgoing TCP SMB response packets (RAW OUTPUT)'
#$EXEC_FIRECHAIN add raw "raw-${NIC}-tcp-out" tcp source 445 do_not_track 2>/dev/null

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ FILTER INPUT ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

#printInfo 'Allow incoming TCP SMB request packets (FILTER INPUT)'
#$EXEC_FIRECHAIN add filter "filter-${NIC}-tcp-in" tcp dest 445 ACCEPT 2>/dev/null

#printInfo 'Allow incoming TCP SMB response packets (FILTER INPUT)'
#$EXEC_FIRECHAIN add filter "filter-${NIC}-tcp-in" tcp source 445 ACCEPT 2>/dev/null

################################# IPSET-SAVE ##################################

if [ $"saveOnExit" == 'true' ]; then
	printInfo 'Persisting IPSet configuration'

	# Backup existing /etc/network/ipset.conf
	if [ -f /etc/network/ipset.conf ]; then
		$EXEC_CP /etc/network/ipset.conf /etc/network/ipset.conf.bak
	fi

	# Save /etc/network/ipset.conf
	$IPSET save > /etc/network/ipset.conf
fi

echo

exit 0
