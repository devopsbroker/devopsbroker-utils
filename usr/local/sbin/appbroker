#!/usr/bin/bash

#
# appbroker - DevOpsBroker administrative tool for installing non-packaged applications
#
# Copyright (C) 2019 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 18.04.2 LTS running kernel.osrelease = 4.18.0-16
#
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# Load /etc/devops/functions-io.conf if FUNC_IO_CONFIG is unset
if [ -z "$FUNC_IO_CONFIG" ] && [ -f /etc/devops/functions-io.conf ]; then
	source /etc/devops/functions-io.conf
fi

${FUNC_IO_CONFIG?"[1;91mCannot load '/etc/devops/functions-io.conf': No such file[0m"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Robustness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

set -o errexit                 # Exit if any statement returns a non-true value
set -o nounset                 # Exit if use an uninitialised variable
set -o pipefail                # Exit if any statement in a pipeline returns a non-true value
IFS=$'\n\t'                    # Default the Internal Field Separator to newline and tab

scriptName='appbroker'

# Display error if not running as root
if [ "$USER" != 'root' ]; then
	printError $scriptName 'Permission denied (you must be root)'
	exit 1
fi

################################## Functions ##################################


################################## Variables ##################################

## Bash exec variables
EXEC_APT=/usr/bin/apt
EXEC_APT_KEY=/usr/bin/apt-key
EXEC_JAVA=/usr/bin/java
EXEC_SHA256SUM=/usr/bin/sha256sum
EXEC_UPDATE_ALTS=/usr/bin/update-alternatives

## Options
command=${1:-}
appName=${2:-}
fileName=${3:-}

## Variables
sudoCommands=('install')
validCommands=(${sudoCommands[@]})

usageMessage="$scriptName install APP_NAME ${gold}[FILE]"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage $usageMessage
	exit 1
fi

# Display error if invalid command
containsElement "$command" "${validCommands[@]}"
if [ $? -eq 1 ]; then
	printError $scriptName "Invalid command: '$command'"
	echo
	printUsage $usageMessage

	exit 1
fi

if [ $command == 'install' ]; then
	# Display error if application name parameter is missing
	if [ -z "$appName" ]; then
		printError $scriptName 'Missing application name parameter'
		echo
		printUsage "$scriptName $command { atom | google-cloud-sdk | jdk | unifi } ${gold}[FILE]"

		exit 1
	fi

	# Display error if application name parameter is invalid
	if [[ ! "$appName" =~ ^(atom|google-cloud-sdk|jdk|unifi)$ ]]; then
		printError $scriptName "Invalid application name: '$appName'"
		echo
		printUsage "$scriptName $command { atom | google-cloud-sdk | jdk | unifi } ${gold}[FILE]"

		exit 1
	fi

	if [[ "$appName" =~ ^(google-cloud-sdk|jdk)$ ]]; then
		errorMessage=$(isValidFile $scriptName "$fileName")

		# Display error if file parameter is missing or invalid
		if [ "$errorMessage" != '0' ]; then
			echo "$errorMessage"
			echo
			printUsage "$scriptName $command $appName ${gold}FILE"

			exit 1
		fi
	fi
fi

################################### Actions ###################################

if [ $command == 'install' ]; then

	if [ $appName == 'atom' ]; then
		if [ ! -f /etc/apt/sources.list.d/atom.list ]; then
			$EXEC_WGET -qO - https://packagecloud.io/AtomEditor/atom/gpgkey | $EXEC_APT_KEY add -

			$SHELL -c 'echo "deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main" > /etc/apt/sources.list.d/atom.list'
		fi

		$EXEC_APT update

		$EXEC_APT install atom

	elif [ $appName == 'google-cloud-sdk' ]; then
		sdkFileName='google-cloud-sdk-238.0.0-linux-x86_64.tar.gz'
		sdkFileSHA256='50746c8c02ac4014265661f8fed9c07c81968b461e8eb077a382c23c039b61d6'
		installDir='/opt'

		# Download the google-cloud-sdk file
		if [ ! -f "$HOME/Downloads/$sdkFileName" ]; then
			printInfo "Downloading $sdkFileName"

			$EXEC_CURL --output "$HOME/Downloads/$sdkFileName" https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/$sdkFileName
		fi

		# Install google-cloud-sdk
		if [ ! -d "$installDir/google-cloud-sdk" ]; then
			# Validate the google-cloud-sdk SHA256 checksum
			printInfo "Validating $sdkFileName SHA256 checksum"

			IFS=' '; fileChecksum=( $($EXEC_SHA256SUM "$HOME/Downloads/$sdkFileName") ); IFS=$'\n\t'
			if [ "$sdkFileSHA256" != "${fileChecksum[0]}" ]; then
				printError $scriptName "Invalid SHA256 checksum: '${fileChecksum[0]}'"
				echo

				printInfo "Removing google-cloud-sdk file"
				$EXEC_RM "$HOME/Downloads/$sdkFileName"

				exit 1
			fi

			# Extract google-cloud-sdk file
			printInfo "Extracting $sdkFileName to $installDir"

			$EXEC_TAR xzf "$HOME/Downloads/$sdkFileName" --directory="$installDir"
		fi

		# Enable Bash completion
		if [ ! -f /etc/bash_completion.d/google-cloud-sdk ]; then
			printInfo 'Enabling google-cloud-sdk Bash completion'

			$EXEC_CP -a /opt/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/google-cloud-sdk
		fi

		# Setup user's $HOME/bin directory
		if [ ! -L "$HOME/bin/gcloud" ]; then
			printInfo "Adding google-cloud-sdk commands to $HOME/bin"

			$EXEC_CP -rs $installDir/google-cloud-sdk/bin/* $HOME/bin/
		fi

		# Initialize google-cloud-sdk
		sdkDefaultConfig="$HOME/.config/gcloud/configurations/config_default"
		if [ ! -f "$sdkDefaultConfig" ] || [ ! -s "$sdkDefaultConfig" ]; then
			printInfo "Initializing google-cloud-sdk"

			$HOME/bin/gcloud init
		fi

	elif [ $appName == 'jdk' ]; then
		# Extract JDK file to the /opt directory
		if [ "$PWD" != '/opt' ]; then
			printInfo "Extracting $fileName to /opt"
			$EXEC_TAR xvzf "$fileName" --directory="/opt"
			cd /opt
		else
			printInfo "Extracting $fileName"
			$EXEC_TAR xvzf "$fileName"
		fi
		echo

		# Find which JDK was installed, in case there are multiples
		jdkArray=( $($EXEC_FIND $PWD -maxdepth 1 -type d -name "jdk*") )

		if [ "${#jdkArray[@]}" -gt 1 ]; then
			echo "${bold}${yellow}Which JDK version are you installing?${white}"
			select jdkDir in "${jdkArray[@]}"; do
				if [ "${#jdkDir}" -ne 0 ]; then
					echo
					break;
				fi
			done
		else
			jdkDir="${jdkArray[0]}"
		fi

		# Set JDK directory permissions and ownership
		printInfo "Setting directory permssions and ownership for $jdkDir"
		$EXEC_CHMOD -R 755 "$jdkDir"
		$EXEC_CHOWN -R root:users "$jdkDir"
		echo

		# Update the /usr/bin/java symlink
		printInfo "Updating /usr/bin/java"
		$EXEC_UPDATE_ALTS --install /usr/bin/java java "$jdkDir"/bin/java 100
		$EXEC_UPDATE_ALTS --display java
		echo

		# Update JAVA_HOME and JRE_HOME environment variables
		printInfo "Updating JAVA_HOME and JRE_HOME environment variables"
		$EXEC_SED -i '/^JAVA_HOME/d' /etc/environment
		$EXEC_SED -i '/^JRE_HOME/d' /etc/environment

		echo -e "\nJAVA_HOME=$jdkDir\nJRE_HOME=$jdkDir/jre" >> /etc/environment
		echo

		# Print java version
		$EXEC_JAVA -version
		echo

		printNotice $scriptName "Please run 'source /etc/environment' to update Java environment variables"

	elif [ $appName == 'unifi' ]; then
		# Add a new APT source list for ubiquiti, if necessary
		if [ ! -f /etc/apt/sources.list.d/100-ubnt-unifi.list ]; then
			printInfo 'Adding ubiquiti APT source list file'
			echo 'deb https://www.ui.com/downloads/unifi/debian stable ubiquiti' | $EXEC_TEE /etc/apt/sources.list.d/100-ubnt-unifi.list

			if [ ! -f /etc/apt/trusted.gpg.d/unifi-repo.gpg ]; then
				printInfo 'Adding ubiquiti GPG keys'
				$EXEC_WGET -qO /etc/apt/trusted.gpg.d/unifi-repo.gpg https://dl.ui.com/unifi/unifi-repo.gpg
			fi
			echo
		fi

		# Add a new APT source list for mongodb, if necessary
		if [ ! -f /etc/apt/sources.list.d/mongodb-org-3.4.list ]; then
			printInfo 'Adding mongodb APT source list file'
			echo 'deb https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse' | $EXEC_TEE /etc/apt/sources.list.d/mongodb-org-3.4.list

			printInfo 'Adding mongodb GPG keys'
			$EXEC_WGET -qO - https://www.mongodb.org/static/pgp/server-3.4.asc | $EXEC_APT_KEY add -
			echo
		fi

		# Install unifi
		printInfo 'Installing unifi'
		$EXEC_APT update && $EXEC_APT --yes --no-install-recommends install unifi
	fi
fi

exit 0
