#!/usr/bin/bash

#
# snippet - DevOpsBroker utility for generating code snippets
#
# Copyright (C) 2019 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 18.04.2 LTS running kernel.osrelease = 4.18.0-15
#
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Robustness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

set -o errexit                 # Exit if any statement returns a non-true value
set -o nounset                 # Exit if use an uninitialised variable
set -o pipefail                # Exit if any statement in a pipeline returns a non-true value
IFS=$'\n\t'                    # Default the Internal Field Separator to newline and tab

scriptName='snippet'

################################## Functions ##################################

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     validateAssembly
# Description:  Performs validation for the asm command
# -----------------------------------------------------------------------------
function validateAssembly() {
	# Display error if snippet name parameter is missing
	if [ -z "$snippetName" ]; then
		printError $scriptName 'Missing snippet name parameter'
		echo
		printUsage "$scriptName $command { multiplyadd }"

		exit 1
	fi

	# Display error if snippet name parameter is invalid
	if [[ ! "$snippetName" =~ ^(multiplyadd)$ ]]; then
		printError $scriptName "Invalid $command snippet: '$snippetName'"
		echo
		printUsage "$scriptName $command { multiplyadd }"

		exit 1
	fi
}

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     validateBash
# Description:  Performs validation for the bash command
# -----------------------------------------------------------------------------
function validateBash() {
	# Display error if snippet name parameter is missing
	if [ -z "$snippetName" ]; then
		printError $scriptName 'Missing snippet name parameter'
		echo
		printUsage "$scriptName $command { arraylength | arrayloop | forloop | selectmenu }"

		exit 1
	fi

	# Display error if snippet name parameter is invalid
	if [[ ! "$snippetName" =~ ^(arraylength|arrayloop|forloop|selectmenu)$ ]]; then
		printError $scriptName "Invalid $command snippet: '$snippetName'"
		echo
		printUsage "$scriptName $command { arraylength | arrayloop | forloop | selectmenu }"

		exit 1
	fi
}

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     validateGCC
# Description:  Performs validation for the gcc command
# -----------------------------------------------------------------------------
function validateGCC() {
	# Display error if snippet name parameter is missing
	if [ -z "$snippetName" ]; then
		printError $scriptName 'Missing snippet name parameter'
		echo
		printUsage "$scriptName $command { customlib }"

		exit 1
	fi

	# Display error if snippet name parameter is invalid
	if [[ ! "$snippetName" =~ ^(customlib)$ ]]; then
		printError $scriptName "Invalid $command snippet: '$snippetName'"
		echo
		printUsage "$scriptName $command { customlib }"

		exit 1
	fi
}

# Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯
# Function:     validateMalloc
# Description:  Performs validation for the malloc command
# -----------------------------------------------------------------------------
function validateMalloc() {
	# Display error if struct name parameter is missing
	if [ -z "$snippetName" ]; then
		printError $scriptName 'Missing struct name parameter'
		echo
		printUsage "$scriptName $command STRUCT_NAME MD5_HASH"

		exit 1
	fi

	# Display error if MD5 hash parameter is missing
	if [ -z "$md5Hash" ]; then
		printError $scriptName 'Missing md5 hash parameter'
		echo
		printUsage "$scriptName $command $snippetName MD5_HASH"

		exit 1
	fi
}

################################## Variables ##################################

## Options
command=${1:-}
snippetName=${2:-}

## Variables
validCommands=('asm' 'bash' 'gcc' 'malloc')

usageMessage="$scriptName { asm | bash | gcc | malloc } SNIPPET_NAME"

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$command" ]; then
	printUsage $usageMessage
	exit 1
fi

# Display error if invalid command
containsElement "$command" "${validCommands[@]}"
if [ $? -eq 1 ]; then
	printError $scriptName "Invalid command: '$command'"
	echo
	printUsage $usageMessage

	exit 1
fi

################################### Actions ###################################

if [ $command == 'asm' ]; then
	validateAssembly

	if [ $snippetName == 'multiplyadd' ]; then
		echo '	mov        cl, dl                 ; value = (value * 10) + digit'
		echo '	lea        eax, [eax+eax*4]'
		echo '	lea        eax, [ecx+eax*2]'
	fi

elif [ $command == 'bash' ]; then
	validateBash

	if [ $snippetName == 'arraylength' ]; then
		echo '${#ArrayName[@]}'
	elif [ $snippetName == 'arrayloop' ]; then
		echo 'for i in "${array[@]}"; do'
		echo '	echo $i'
		echo 'done'
	elif [ $snippetName == 'forloop' ]; then
		echo 'for i in 1 2 3 4 5; do'
		echo '	echo "Number: $i"'
		echo 'done'
		echo
		echo 'for i in {1..5}; do'
		echo '	echo "Number: $i"'
		echo 'done'
		echo
		echo 'for i in {0..10..2}; do'
		echo '	echo "Number: $i"'
		echo 'done'
		echo
		echo 'for (( i=1; i<=5; i++ )); do'
		echo '	echo "Index: $i"'
		echo 'done'
		echo
		echo 'for file in /etc/*; do'
		echo '	if [ "${file}" == "/etc/resolv.conf" ]; then'
		echo '		echo "Found it!"'
		echo '		break'
		echo '	fi'
		echo 'done'
	elif [ $snippetName == 'selectmenu' ]; then
		echo "select confirmDelete in 'Yes' 'No'; do"
		echo "	if [ \$confirmDelete == 'Yes' ]; then"
		echo "		echo 'Perform delete'"
		echo "	fi"
		echo "	break;"
		echo "done"
	fi

elif [ $command == 'gcc' ]; then
	validateGCC

	if [ $snippetName == 'customlib' ]; then
		echo 'gcc foobar.c -Ldir -llib -o foobar'
	fi

elif [ $command == 'malloc' ]; then
	md5Hash=${3:-}
	validateMalloc
	paramName=${snippetName,}

	echo "/* Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
	echo " * Function:    ${md5Hash}_create${snippetName}"
	echo " * Description: Creates a ${snippetName} struct instance"
	echo " *"
	echo " * Returns:     A ${snippetName} struct instance"
	echo " * ----------------------------------------------------------------------------"
	echo " */"
	echo "${snippetName} *${md5Hash}_create${snippetName}();"
	echo
	echo "/* Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
	echo " * Function:    ${md5Hash}_destroy${snippetName}"
	echo " * Description: Frees the memory allocated to the ${snippetName} struct pointer"
	echo " *"
	echo " * Parameters:"
	echo " *   ${paramName}	A pointer to the ${snippetName} instance to destroy"
	echo " * ----------------------------------------------------------------------------"
	echo " */"
	echo "void ${md5Hash}_destroy${snippetName}(${snippetName} *${paramName});"
	echo
	echo "/* Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
	echo " * Function:    ${md5Hash}_cleanUp${snippetName}"
	echo " * Description: Frees dynamically allocated memory within the ${snippetName} instance"
	echo " *"
	echo " * Parameters:"
	echo " *   ${paramName}	A pointer to the ${snippetName} instance to clean up"
	echo " * ----------------------------------------------------------------------------"
	echo " */"
	echo "void ${md5Hash}_cleanUp${snippetName}(${snippetName} *${paramName});"
	echo
	echo "/* Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯Â¯"
	echo " * Function:    ${md5Hash}_init${snippetName}"
	echo " * Description: Initializes an existing ${snippetName} struct"
	echo " *"
	echo " * Parameters:"
	echo " *   ${paramName}	A pointer to the ${snippetName} instance to initalize"
	echo " * ----------------------------------------------------------------------------"
	echo " */"
	echo "void ${md5Hash}_init${snippetName}(${snippetName} *${paramName});"
	echo

fi

exit 0
