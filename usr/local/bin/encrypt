#!/usr/bin/bash

#
# encrypt - DevOpsBroker utility for encrypting files with a symmetric cipher
#
# Copyright (C) 2018 Edward Smith <edwardsmith@devopsbroker.org>
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# Developed on Ubuntu 16.04.4 LTS running kernel.osrelease = 4.13.0-43
#
# Encrypt files and directories using gpg and a password.
#
# Parameters:
#   $1: The name of the file or directory to encrypt
# -----------------------------------------------------------------------------
#

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Preprocessing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Load /etc/devops/ansi.conf if ANSI_CONFIG is unset
if [ -z "$ANSI_CONFIG" ] && [ -f /etc/devops/ansi.conf ]; then
	source /etc/devops/ansi.conf
fi

${ANSI_CONFIG?"[1;91mCannot load '/etc/devops/ansi.conf': No such file[0m"}

# Load /etc/devops/exec.conf if EXEC_CONFIG is unset
if [ -z "$EXEC_CONFIG" ] && [ -f /etc/devops/exec.conf ]; then
	source /etc/devops/exec.conf
fi

${EXEC_CONFIG?"[1;91mCannot load '/etc/devops/exec.conf': No such file[0m"}

# Load /etc/devops/functions.conf if FUNC_CONFIG is unset
if [ -z "$FUNC_CONFIG" ] && [ -f /etc/devops/functions.conf ]; then
	source /etc/devops/functions.conf
fi

${FUNC_CONFIG?"[1;91mCannot load '/etc/devops/functions.conf': No such file[0m"}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Robustness ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

set -o errexit                 # Exit if any statement returns a non-true value
set -o nounset                 # Exit if use an uninitialised variable
set -o pipefail                # Exit if any statement in a pipeline returns a non-true value
IFS=$'\n\t'                    # Default the Internal Field Separator to newline and tab

scriptName='encrypt'

################################## Variables ##################################

## Bash exec variables
EXEC_SHRED=/usr/bin/shred

## Options
fileOrDir="${1:-}"

## Variables
TMPDIR=${TMPDIR:-'/tmp'}

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ OPTION Parsing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# Display usage if no parameters given
if [ -z "$fileOrDir" ]; then
	printUsage "$scriptName { FILE | DIR }"
	echo

	exit 1
fi

if [ ! -f "$fileOrDir" ] && [ ! -d "$fileOrDir" ]; then
	printError $scriptName "Cannot access '$fileOrDir': No such file or directory"
	echo
	printUsage "$scriptName { FILE | DIR }"

	exit 1
fi

if [ -d "$fileOrDir" ] && [[ "$fileOrDir" =~ /$ ]]; then
	fileOrDir=${fileOrDir::-1}
fi

################################### Actions ###################################

if [ -d "$fileOrDir" ]; then
	fileName="$fileOrDir.tar.gz"

	printInfo "Creating $fileName archive"
	$EXEC_TAR -czf "$TMPDIR/$fileName" "$fileOrDir"

	printInfo "Encrypting $fileName"
	$EXEC_GPG --symmetric -z 0 "$TMPDIR/$fileName" 2>/dev/null

	# Shred the tarball if gpg succeeded
	if [ -f "$TMPDIR/$fileName.gpg" ]; then
		$EXEC_SHRED -uzn 0 "$TMPDIR/$fileName"
	fi

	$EXEC_MV "$TMPDIR/$fileName.gpg" $PWD

else

	printInfo "Encrypting $fileOrDir"
	$EXEC_GPG --symmetric "$fileOrDir" 2>/dev/null

fi

exit 0
